/*global define, _:false, amplify, $*/
define([
    'handlebars',
    'views/base/view',
    'config/Config',
    'config/Services',
    'config/Events',
    'text!templates/download/selectors.hbs',
    'i18n!nls/download-selectors',
    'fx-common/WDSClient',
    'jstree',
    'amplify'
], function (Handlebars, View, Config, E, Services, template, i18nLabels, WDSClient) {

    'use strict';

    var s = {
        SELECTOR_INDICATOR: '.selector-indicator',
        SELECTOR_COUNTRY: '.selector-country',
        SELECTOR_YEAR: '.selector-year',
        SELECTOR_QUALIFIER: '.selector-qualifier',
        SELECTOR_BTN_ALL: '[data-select="all"]',
        SELECTOR_BTN_NONE: '[data-select="none"]',

        SELECTORS: '[data-role="selectors"]',
        SELECTOR_CONTAINER_COUNTRY: '[data-selector="country"]',

        SELECTOR_FILTER: '[data-role="filter"]'
    };

    var SelectorsView = View.extend({

        initialize: function (options) {
            $.extend(true, this, options);
        },

        // Automatically render after initialize
        autoRender: true,

        className: 'download-selectors',

        template: template,

        getTemplateData: function () {
            return i18nLabels;
        },

        manipulateTemplate: function () {

            switch (this.section) {

                case Config.DOWNLOAD_BY_COUNTRY :
                    this.$selectors.prepend(this.$selectorContainerCountry);
                    break;
            }
        },

        initVariables: function () {

            //Selectors
            this.$selectorIndicator = this.$el.find(s.SELECTOR_INDICATOR);
            this.$selectorCountry = this.$el.find(s.SELECTOR_COUNTRY);
            this.$selectorYear = this.$el.find(s.SELECTOR_YEAR);
            this.$selectorQualifier = this.$el.find(s.SELECTOR_QUALIFIER);

            this.$selectors = this.$el.find(s.SELECTORS);
            this.$selectorContainerCountry = this.$el.find(s.SELECTOR_CONTAINER_COUNTRY);

            //Codelists
            this.cachedCodelist = [];

            this.codelists_conf = {
                cl_indicator: Services.CL_INDICATOR,
                cl_country: Services.CL_COUNTRY,
                cl_qualifier: Services.CL_QUALIFIER
            };

            this.codelists = Object.keys(this.codelists_conf);
        },

        initComponents: function () {

            this.WDSClient = new WDSClient({
                //serviceUrl: Config.WDS_URL,
                datasource: Config.DB_NAME,
                outputType: Config.WDS_OUTPUT_TYPE
            });

        },

        initJsTreeSelector: function (selector, $container, cl) {

            //Init country selector
            var data = [],
                self = this;

            _.each(cl || amplify.store.sessionStorage('cl_' + selector), function (n) {
                data.push(createNode(n));
            });

            //Clear jsTree
            $container.jstree('destroy');
            $container.empty();

            $container.jstree({
                "core": {
                    "multiple": isMultiSelection(selector),
                    "animation": 0,
                    "themes": {"stripes": true},
                    'data': data
                },
                "plugins": ["search", "wholerow", "checkbox"],
                "search": {
                    show_only_matches: true
                }

            });

            initSearch(selector, $container);

            initBtns(selector, $container);

            //Limit selection
            $container.on("select_node.jstree", _.bind(function (e, data) {

                if (data.selected.length > Config.SELECTOR_THRESHOLD) {
                    $container.jstree(true).deselect_node(data.node);
                } else {
                    amplify.publish(E.SELECTOR_SELECT + selector, data.node);
                }

            }, this));

            function createNode(item) {

                // Expected format of the node (there are no required fields)
                var config = {
                    id: item.code, // will be autogenerated if omitted
                    parent: item.parent || '#', // required
                    text: item.label // node text
                    //icon: "string", // string for custom
                    /* state: {
                     opened: boolean,  // is the node open
                     disabled: boolean,  // is the node disabled
                     selected: boolean  // is the node selected
                     },*/
                    //children    : [],  // array of strings or objects
                    //li_attr: {},  // attributes for the generated LI node
                    //a_attr: {}  // attributes for the generated A node
                };

                return config;
            }

            function initSearch(selector, $container) {
                var to = false,
                    $filter = self.$el.find('[data-selector="' + selector + '"]').find(s.SELECTOR_FILTER);

                $filter.keyup(function () {
                    if (to) {
                        clearTimeout(to);
                    }
                    to = setTimeout(function () {
                        var v = $filter.val();
                        $container.jstree(true).search(v);
                    }, 250);
                });
            }

            function initBtns(selector, $container) {

                var $btnSelectAll = self.$el.find('[data-selector="' + selector + '"]').find(s.SELECTOR_BTN_ALL),
                    $btnSelectNone = self.$el.find('[data-selector="' + selector + '"]').find(s.SELECTOR_BTN_NONE);

                $btnSelectAll.on('click', function () {
                    $container.jstree("check_all");
                });

                $btnSelectNone.on('click', function () {
                    $container.jstree("uncheck_all");
                });
            }

            function isMultiSelection(selector) {

                var multiple = Config.SELECTOR_MULTISELECTION[self.section.toUpperCase()];
                return multiple.indexOf(selector) > -1;
            }
        },

        preloadResources: function () {

            _.each(this.codelists, _.bind(function (cd) {

                //Check if codelist is cached otherwise query
                var stored = amplify.store.sessionStorage(cd);

                if (stored === undefined) {

                    this.WDSClient.retrieve({
                        payload: {query: this.codelists_conf[cd]},
                        success: _.bind(this.onPreloadCodelistSuccess, this, cd),
                        error: _.bind(this.onPreloadCodelistError, this)
                    });

                } else {
                    this.onCodelistCached(cd);
                }

            }, this));

        },

        onCodelistCached: function (codelist) {

            this.cachedCodelist.push(codelist);

            if (this.cachedCodelist.length === this.codelists.length) {

                this.ready = true;

                this.onReady();
            }
        },

        onPreloadCodelistError: function (e) {
            amplify.publish(E.CODELIST_LOAD_ERROR, e)
        },

        onPreloadCodelistSuccess: function (cd, response) {

            amplify.store.sessionStorage(cd, response);

            this.onCodelistCached(cd);
        },

        attach: function () {

            View.prototype.attach.call(this, arguments);

            //update State
            amplify.publish('voh.state.change', {menu: 'scores'});

            this.initVariables();

            this.manipulateTemplate();

            this.bindEventListeners();

            this.initComponents();

            this.preloadResources();

        },

        onReady: function () {

            this.initPage();

            this.unlockForm();

        },

        initPage: function () {

            this.printSelectors();
        },

        printSelectors: function () {

            this.initJsTreeSelector('indicator', this.$selectorIndicator);

            this.initJsTreeSelector('country', this.$selectorCountry);

            var cl = [];

            for (var i = Config.SEL_YEAR_FROM; i < (Config.SEL_YEAR_TO + 1); i++) {
                cl.push({
                    code: i,
                    label: String(i)
                });
            }

            this.initJsTreeSelector('year', this.$selectorYear, cl);

            this.initJsTreeSelector('qualifier', this.$selectorQualifier);

        },

        printDefaultSelection: function () {
            var self = this;

            this.$selectorIndicator.jstree("uncheck_all");
            if (Config.DEFAULT_SEL_INDICATOR && Array.isArray(Config.DEFAULT_SEL_INDICATOR)) {
                _.each(Config.DEFAULT_SEL_INDICATOR, function (v) {
                    self.$selectorIndicator.jstree(true).select_node({id: v});
                });
            }

            this.$selectorCountry.jstree("uncheck_all");
            if (Config.DEFAULT_SEL_COUNTRY && Array.isArray(Config.DEFAULT_SEL_COUNTRY)) {
                _.each(Config.DEFAULT_SEL_COUNTRY, function (v) {
                    self.$selectorCountry.jstree(true).select_node({id: v});
                });
            }

            this.$selectorYear.jstree("uncheck_all");
            if (Config.DEFAULT_SEL_YEAR && Array.isArray(Config.DEFAULT_SEL_YEAR)) {
                _.each(Config.DEFAULT_SEL_YEAR, function (v) {
                    self.$selectorYear.jstree(true).select_node({id: v});
                });
            }

            this.$selectorQualifier.jstree("uncheck_all");
            if (Config.DEFAULT_SEL_QUALIFIER && Array.isArray(Config.DEFAULT_SEL_QUALIFIER)) {
                _.each(Config.DEFAULT_SEL_QUALIFIER, function (v) {
                    self.$selectorYear.jstree(true).select_node({id: v});
                });
            }

        },

        /* Event binding and callback */

        bindEventListeners: function () {

            amplify.subscribe(E.SELECTOR_SELECT + 'indicator', this, this.onIndicatorSelectorSelect);
            amplify.subscribe(E.SELECTOR_SELECT + 'country', this, this.onCountrySelectorSelect);
            amplify.subscribe(E.SELECTOR_SELECT + 'year', this, this.onYearSelectorSelect);
            amplify.subscribe(E.SELECTOR_SELECT + 'qualifier', this, this.onQualifierSelectorSelect);

        },

        onIndicatorSelectorSelect: function () {
            console.log("onIndicatorSelectorSelect")
        },

        onCountrySelectorSelect: function () {
            console.log("onCountrySelectorSelect")
        },

        onYearSelectorSelect: function () {
            console.log("onYearSelectorSelect")
        },

        onQualifierSelectorSelect: function () {
            console.log("onQualifierSelectorSelect")
        },

        /* Data request process */

        validateInput: function (inputs) {

            var errors = [];

            if (inputs.variables.length === 0) {
                errors.push('select_at_least_one_variable');
            }

            if (inputs.geo.length === 0) {
                errors.push('select_at_least_one_geo');
            }

            return (Object.keys(errors).length === 0) ? true : errors;
        },

        lockForm: function () {

        },

        unlockForm: function () {

        },

        getInputs: function () {

            return {
                indicator: this.$selectorIndicator.jstree(true).get_selected(),
                country: this.$selectorCountry.jstree(true).get_selected(),
                year: this.$selectorYear.jstree(true).get_selected(),
                qualifier: this.$selectorQualifier.jstree(true).get_selected()
            };

        },

        /* Disposition */

        unbindEventListeners: function () {

            //Components disposition
            this.$selectorCountry.jstree('destroy');
            this.$selectorIndicator.jstree('destroy');
            this.$selectorQualifier.jstree('destroy');
            this.$selectorYear.jstree('destroy');

            this.$el.find(s.SELECTOR_BTN_ALL).off();
            this.$el.find(s.SELECTOR_BTN_NONE).off();

            amplify.unsubscribe(E.SELECTOR_SELECT + 'indicator', this.onIndicatorSelectorSelect);
            amplify.unsubscribe(E.SELECTOR_SELECT + 'country', this.onCountrySelectorSelect);
            amplify.unsubscribe(E.SELECTOR_SELECT + 'year', this.onYearSelectorSelect);
            amplify.unsubscribe(E.SELECTOR_SELECT + 'qualifier', this.onQualifierSelectorSelect);

        },

        dispose: function () {

            this.unbindEventListeners();

            View.prototype.dispose.call(this, arguments);
        }

    });

    return SelectorsView;
});
